import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import config
from database import add_record  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î

bot = telebot.TeleBot(config.api_token)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
current_reminders = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
def category_keyboard():
    keyboard = InlineKeyboardMarkup()
    categories = ["–õ–∏—á–Ω–æ–µ üè†", "–†–∞–±–æ—Ç–∞/–£—á–µ–±–∞ üìö", "–ó–¥–æ—Ä–æ–≤—å–µ üíä", "–í–∞–∂–Ω—ã–µ –¥–∞—Ç—ã üéâ", "–§–∏–Ω–∞–Ω—Å—ã üí∞"]
    for category in categories:
        keyboard.add(InlineKeyboardButton(category, callback_data=f"category:{category}"))
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def time_keyboard(user_id):
    keyboard = InlineKeyboardMarkup()
    time_options = ["15 –º–∏–Ω—É—Ç", "30 –º–∏–Ω—É—Ç", "–ß–∞—Å", "–î–µ–Ω—å", "–ù–µ–¥–µ–ª—è"]

    # –ï—Å–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –≤—ã–±—Ä–∞–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫–∏
    selected_times = current_reminders.get(user_id, {}).get('time', [])

    for time in time_options:
        if time in selected_times:
            button_text = f"‚úÖ {time}"
        else:
            button_text = f"‚ùå {time}"

        keyboard.add(InlineKeyboardButton(button_text, callback_data=f"time:{time}:{user_id}"))

    keyboard.add(InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data='send'))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'.",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="create_notification")
        )
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
@bot.callback_query_handler(func=lambda call: call.data == "create_notification")
def create_notification(call):
    user_id = call.message.chat.id
    current_reminders[user_id] = {'user_id': user_id}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(call.message, get_title)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
def get_title(message):
    user_id = message.chat.id
    current_reminders[user_id]['title'] = message.text

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, get_description)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
def get_description(message):
    user_id = message.chat.id
    current_reminders[user_id]['description'] = message.text

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=category_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('category:'))
def get_category(call):
    user_id = call.message.chat.id
    category = call.data.split(":")[1]
    current_reminders[user_id]['group'] = category

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ, –∑–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å:", reply_markup=time_keyboard(user_id))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('time:'))
def get_time_reminder(call):
    user_id = call.message.chat.id
    time_info = call.data.split(":")
    reminder_time = time_info[1]

    if 'time' not in current_reminders[user_id]:
        current_reminders[user_id]['time'] = []

    if reminder_time in current_reminders[user_id]['time']:
        current_reminders[user_id]['time'].remove(reminder_time)
    else:
        current_reminders[user_id]['time'].append(reminder_time)

    bot.edit_message_text(
        chat_id=user_id,
        message_id=call.message.message_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ä–æ–∫–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'.",
        reply_markup=time_keyboard(user_id)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
@bot.callback_query_handler(func=lambda call: call.data == 'send')
def send_notification(call):
    user_id = call.message.chat.id
    reminder_data = current_reminders.get(user_id, {})

    if all(key in reminder_data for key in ['user_id', 'title', 'description', 'group', 'time']):
        reminder_data_to_db = {
            'user_id': reminder_data['user_id'],
            'id': hash((reminder_data['user_id'], reminder_data['title'])),  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
            'title': reminder_data['title'],
            'description': reminder_data['description'],
            'group': reminder_data['group'],
            'time': ", ".join(reminder_data['time']),
            'in_15': "15 –º–∏–Ω—É—Ç" in reminder_data['time'],
            'in_30': "30 –º–∏–Ω—É—Ç" in reminder_data['time'],
            'in_hour': "–ß–∞—Å" in reminder_data['time'],
            'in_day': "–î–µ–Ω—å" in reminder_data['time'],
            'in_week': "–ù–µ–¥–µ–ª—è" in reminder_data['time'],
        }
        add_record(reminder_data_to_db)
        bot.send_message(user_id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    else:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.")

    if user_id in current_reminders:
        del current_reminders[user_id]

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot.polling()
